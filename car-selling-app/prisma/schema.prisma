// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  phone     String?
  avatar    String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cars         Car[]
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  favorites    Favorite[]
  bookings     Booking[]

  @@map("users")
}

model Car {
  id          String     @id @default(cuid())
  title       String
  description String?
  price       Float
  year        Int
  make        String
  model       String
  mileage     Int
  fuelType    FuelType
  transmission Transmission
  bodyType    BodyType
  color       String
  condition   CarCondition
  location    String
  isAvailable Boolean    @default(true)
  isFeatured  Boolean    @default(false)
  viewCount   Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  sellerId    String
  seller      User       @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  images      CarImage[]
  messages    Message[]
  favorites   Favorite[]
  bookings    Booking[]

  @@map("cars")
}

model CarImage {
  id        String   @id @default(cuid())
  url       String
  publicId  String?  // For Cloudinary
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  carId String
  car   Car    @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@map("car_images")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  senderId   String
  receiverId String
  carId      String
  sender     User @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  car        Car  @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  userId String
  carId  String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  car    Car    @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@unique([userId, carId])
  @@map("favorites")
}

model Booking {
  id          String        @id @default(cuid())
  scheduledAt DateTime
  status      BookingStatus @default(PENDING)
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  userId String
  carId  String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  car    Car    @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

// Enums
enum Role {
  USER
  ADMIN
}

enum FuelType {
  PETROL
  DIESEL
  ELECTRIC
  HYBRID
  CNG
  LPG
}

enum Transmission {
  MANUAL
  AUTOMATIC
  CVT
}

enum BodyType {
  SEDAN
  HATCHBACK
  SUV
  COUPE
  CONVERTIBLE
  WAGON
  PICKUP
  VAN
  MOTORCYCLE
}

enum CarCondition {
  NEW
  EXCELLENT
  GOOD
  FAIR
  POOR
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}
